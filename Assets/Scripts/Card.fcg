import "Hud.fcc" as Hud
import "Workflow.fcc" as Workflow
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

graph Card {
    CARD_COLORS Map<string, Color> = Map<string, Color>{
        ColorEnum.Gray: #FFFFFFFF,
        ColorEnum.Green: #00B24AFF,
        ColorEnum.Blue: #00B2F7FF,
        ColorEnum.Yellow: #FFF000FF,
        ColorEnum.Red: #FF0000FF,
    }
    CARD_ELEMENTS Map<string, EResSprite> = Map<string, EResSprite>{
        ElementEnum.Fire: EResSprite.ElementFire,
        ElementEnum.Water: EResSprite.ElementWater,
        ElementEnum.Wood: EResSprite.ElementWood,
    }

    _Color string
    _Element string
    _PowerPoint int

    _ColorWidget entity<UIWidget>
    _ElementWidget entity<UIWidget>
    _PowerPointWidget entity<UIWidget>

    event OnAwake() {
        _ColorWidget = GetChildByIndex(thisEntity, 0) as entity<UIWidget>
        _ElementWidget = GetChildByIndex(thisEntity, 1) as entity<UIWidget>
        _PowerPointWidget = GetChildByIndex(thisEntity, 2) as entity<UIWidget>
    }

    func UpdateInfo(cardInfo List<object>) {
        LogInfo("[Card] UpdateInfo: " + cardInfo)

        _Color = cardInfo[0]
        _Element = cardInfo[1]
        _PowerPoint = cardInfo[2] as int

        UpdateVisual()
    }

    func UpdateVisual() {
        LogInfo("[Card] UpdateVisual: " + CARD_COLORS[_Color] + " - " + CARD_ELEMENTS[_Element] + " - " + _PowerPoint)

        _ColorWidget<UIWidgetImage>.Color = CARD_COLORS[_Color]
        _ElementWidget<UIWidgetImage>.SpriteName = CARD_ELEMENTS[_Element]
        _PowerPointWidget<UIWidgetLabel>.Content = _PowerPoint

        thisEntity<UIWidget>.Active = true
    }

    func GetInfo() List<object> {
        LogInfo("[Card] GetInfo")

        return List<object>{_Color, _Element, _PowerPoint}
    }

    func GetColor() string {
        return _Color
    }

    func GetElement() string {
        return _Element
    }

    func GetPowerPoint() int {
        return _PowerPoint
    }

    func SetSelected(isSelected bool) {
        LogInfo("[Card] SetSelected: " + isSelected)

        var anchorPosition = thisEntity<UIWidget>.AnchorPosition
        if isSelected {
            anchorPosition.Y = 20
        } else {
            anchorPosition.Y = 0
        }
        thisEntity<UIWidget>.AnchorPosition = anchorPosition
    }

    func Hide() {
        LogInfo("[Card] Hide")

        thisEntity<UIWidget>.Active = false
    }

    func GetSignal() List<object> {
        return List<object>{_Color, _Element}
    }

    func GetColorVisual() Color {
        return CARD_COLORS[_Color]
    }

    func GetElementVisual() EResSprite {
        return CARD_ELEMENTS[_Element]
    }
}