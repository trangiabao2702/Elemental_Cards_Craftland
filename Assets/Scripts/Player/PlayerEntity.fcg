import "Hud.fcc" as Hud
import "List.fcc" as List
import "Player.fcc" as Player
import "Workflow.fcc" as Workflow
import "StdLibrary.fcc" as StdLib
import "Hostility.fcc" as Hostility
import "EditorGenLib.fcc" as EditorLib

// import "./PlayerEntity.fcg" as PlayerEntity
import "./PlayerDeck.fcg" as PlayerDeck
import "../Card.fcg" as Card
import "../HUD/DuelHUD.fcg" as DuelHUD

graph PlayerEntity {
    _Opponent entity<Player>
    _Deck List<List<object>>
    _CardsOnHand List<List<object>> = List<List<object>>{}
    _DuelCardIndex int = -1

    _DuelHUD entity<CustomUI>
    _DuelCard entity<UIWidget>
    _PrevSelectedCard entity<UIWidget>

    event OnPlayerJoin(player entity<Player>) {
        CreateCustomUI(out var duelHud, thisEntity<Player>, EResUI.Duel)
        _DuelHUD = duelHud
    }

    event OnPhaseStart(phase entity<Phase>) {
        var phaseIndex int = phase<Phase>.Index
        if phaseIndex == EPhase.Preparation {
            SetUpDuelDeck()
        } else if phaseIndex == EPhase.Phase1Start || phaseIndex == EPhase.Phase2Start {
            Draw()
        } else if phaseIndex == EPhase.Phase1Duel || phaseIndex == EPhase.Phase2Duel {
            
        } else if phaseIndex == EPhase.Phase1End || phaseIndex == EPhase.Phase2End {
            if IsNoCardToDraw() {
                LogInfo("[PlayerEntity] Lose")
            }
        } else {}
    }

    event OnPhaseEnd(phase entity<Phase>) {
        var phaseIndex int = phase<Phase>.Index
        if phaseIndex == EPhase.Phase1SelectCard || phaseIndex == EPhase.Phase2SelectCard {
            ShowDuelCard()
        }
    }

    func SetOpponent() {
        var hostTeam entity<Team> = thisEntity<Player>.HostTeam
        var opponentTeam entity<Team> = hostTeam<Team>.AttackableTeams[0]
        _Opponent = opponentTeam<Team>.AllTeammates[0]
    }

    func GetOpponent() entity<Player> {
        return _Opponent
    }

    func GetDuelHUD() entity<CustomUI> {
        return _DuelHUD
    }

    func GetDuelCard() entity<UIWidget> {
        return _DuelCard
    }

    // Phase: Preparation
    func SetUpDuelDeck() {
        LogInfo("[PlayerEntity] SetUpDuelDeck()")

        _Deck = thisEntity<PlayerDeck>.GetDeck()
        Shuffle(_Deck)
    }

    // Phase: Start
    func Draw() {
        LogInfo("[PlayerEntity] Draw()")

        if _Deck == nil {
            SetUpDuelDeck()
        }

        while Length(_CardsOnHand) < 5 {
            if _DuelCardIndex >= 0 {
                Insert(_CardsOnHand, _DuelCardIndex, _Deck[0])
            } else {
                Append(_CardsOnHand, _Deck[0])
            }
            RemoveAt(_Deck, 0)
        }

        DispatchEventWithPlatform(OnPlayerDrawCard, _DuelHUD, PlatformType.Local, List<object>{_CardsOnHand})

        _DuelCard<Card>.SetSelected(false)
        _DuelCardIndex = 0
    }

    // Phase: Select
    func SelectCard(cardEntity entity<UIWidget>) {
        LogInfo("[PlayerEntity] SelectCard(): " + cardEntity)

        var currentPhaseIndex int = globalEntity<Global>.CurrentPhaseIndex
        if currentPhaseIndex == EPhase.Phase1SelectCard || currentPhaseIndex == EPhase.Phase2SelectCard {
            _DuelCard = cardEntity
            _DuelCardIndex = _DuelHUD<DuelHUD>.GetIndexOfCurrentCardWidget(_DuelCard)

            if _PrevSelectedCard != nil {
                _PrevSelectedCard<Card>.SetSelected(false)
            }

            _PrevSelectedCard = _DuelCard
            _DuelCard<Card>.SetSelected(true)
        }
    }

    // Phase: Duel
    func ShowDuelCard() {
        LogInfo("[PlayerEntity] ShowDuelCard(): ")

        _DuelCard<Card>.Hide()
        RemoveAt(_CardsOnHand, _DuelCardIndex)

        DispatchEventWithPlatform(OnPlayerShowDuelCard, _DuelHUD, PlatformType.Local, List<object>{_DuelCard<Card>.GetInfo(), true})

        // var opponent entity<Player> = GetOpponent()
        // DispatchEventWithPlatform(OnPlayerShowDuelCard, opponent<PlayerEntity>.GetDuelHUD(), PlatformType.Local, List<object>{_DuelCard<Card>.GetInfo(), false})
    }

    // Phase: End
    func IsNoCardToDraw() bool {
        if Length(_Deck) == 0 {
            return true
        }

        return false
    }
}