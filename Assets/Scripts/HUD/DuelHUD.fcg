import "Hud.fcc" as Hud
import "List.fcc" as List
import "Workflow.fcc" as Workflow
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Player/PlayerEntity.fcg" as PlayerEntity
import "../Card.fcg" as Card
import "Hostility.fcc" as Hostility

graph DuelHUD {
    _Owner entity<Player>

    _CurrentCards List<entity<UIWidget>>
    _CurrentSignals List<entity<UIWidget>>
    _CurrentDuelCard entity<UIWidget>

    _OpponentCards List<entity<UIWidget>>
    _OpponentSignals List<entity<UIWidget>>
    _OpponentDuelCard entity<UIWidget>

    IsSetCurrentDuelCard bool
    IsSetOpponentDuelCard bool

    event OnAwake() {
        _Owner = GetOwner(thisEntity)

        var currentHand = GetChildByIndex(thisEntity, 1) as entity<UIWidget>
        var currentCardsContainer = GetChildByIndex(currentHand, 1) as entity<UIWidget>
        var currentSignalsContainer = GetChildByIndex(currentHand, 2) as entity<UIWidget>
        _CurrentCards = GetChildren(currentCardsContainer) as List<entity<UIWidget>>
        _CurrentSignals = GetChildren(currentSignalsContainer) as List<entity<UIWidget>>

        var opponentHand = GetChildByIndex(thisEntity, 2) as entity<UIWidget>
        var opponentCardsContainer = GetChildByIndex(opponentHand, 1) as entity<UIWidget>
        var opponentSignalsContainer = GetChildByIndex(opponentHand, 2) as entity<UIWidget>
        _OpponentCards = GetChildren(opponentCardsContainer) as List<entity<UIWidget>>
        _OpponentSignals = GetChildren(opponentSignalsContainer) as List<entity<UIWidget>>

        var duelCards = GetChildByIndex(thisEntity, 3) as entity<UIWidget>
        var currentDuelCardContainer = GetChildByIndex(duelCards, 0) as entity<UIWidget>
        var opponentDuelCardContainer = GetChildByIndex(duelCards, 1) as entity<UIWidget>
        _CurrentDuelCard = GetChildByIndex(currentDuelCardContainer, 1) as entity<UIWidget>
        _OpponentDuelCard = GetChildByIndex(opponentDuelCardContainer, 1) as entity<UIWidget>
    }

    event OnPhaseStart(phase entity<Phase>) {
        var phaseIndex int = phase<Phase>.Index
        if phaseIndex == EPhase.Phase1End || phaseIndex == EPhase.Phase2End {
            IsSetCurrentDuelCard = false
            IsSetOpponentDuelCard = false
        }
    }

    event OnPlayerDrawCard(cardsOnHand List<object>) {
        LogInfo("[DuelHUD] Receive event OnPlayerDrawCard: " + cardsOnHand)

        for key, card in cardsOnHand {
            _CurrentCards[key]<Card>.UpdateInfo(card as List<object>)
        }
    }

    event OnPlayerShowDuelCard(duelCard List<object>, isOwner bool) {
        LogInfo("[DuelHUD] Receive event OnPlayerShowDuelCard: " + duelCard)

        if isOwner {
            _CurrentDuelCard<Card>.UpdateInfo(duelCard)
            IsSetCurrentDuelCard = true
        } else {
            _OpponentDuelCard<Card>.UpdateInfo(duelCard)
            IsSetOpponentDuelCard = true
        }

        CheckSetDuelCards()
    }

    event OnPlayerClaimedSignal(duelCard entity<UIWidget>, isOwner bool) {
        LogInfo("[DuelHUD] Receive event OnPlayerClaimedSignal: " + duelCard)

        if isOwner {
            UpdateSignalsVisual(_CurrentSignals, duelCard)
        } else {
            UpdateSignalsVisual(_OpponentSignals, duelCard)
        }
    }

    func CheckSetDuelCards() {
        if IsSetCurrentDuelCard && IsSetOpponentDuelCard {
            DispatchEventWithPlatform(OnDuelCardSet, globalEntity, PlatformType.Local, List<object>{_Owner, _Owner<PlayerEntity>.GetOpponent()})
        }
    }

    func GetIndexOfCurrentCardWidget(cardWidget entity<UIWidget>) int {
        return IndexOf(_CurrentCards, cardWidget)
    }

    func UpdateSignalsVisual(signalWidgets List<entity<UIWidget>>, duelCard entity<UIWidget>) {
        var elementSignal string = duelCard<Card>.GetElement()
        var elementContainer entity<UIWidget>

        if elementSignal == ElementEnum.Fire {
            elementContainer = signalWidgets[0]
        } else if elementSignal == ElementEnum.Water {
            elementContainer = signalWidgets[1]
        } else if elementSignal == ElementEnum.Wood {
            elementContainer = signalWidgets[2]
        } else {}

        var signalWidget entity<UIWidget> = GetChildByIndex(elementContainer, 0) as entity<UIWidget>
        if signalWidget<UIWidget>.Active {
            StdLib.Clone(out var cloneSignalWidget, signalWidget)
            UpdateSignalVisual(cloneSignalWidget as entity<UIWidget>, duelCard)
        } else {
            signalWidget<UIWidget>.Active = true
            UpdateSignalVisual(signalWidget as entity<UIWidget>, duelCard)
        }
    }

    func UpdateSignalVisual(signalWidget entity<UIWidget>, duelCard entity<UIWidget>) {
        var colorWidget = GetChildByIndex(signalWidget, 1)
        var elementWidget = GetChildByIndex(signalWidget, 2)

        colorWidget<UIWidgetImage>.Color = duelCard<Card>.GetColorVisual()
        elementWidget<UIWidgetImage>.SpriteName = duelCard<Card>.GetElementVisual()
    }
}