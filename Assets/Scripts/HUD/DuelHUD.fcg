import "Hud.fcc" as Hud
import "List.fcc" as List
import "Workflow.fcc" as Workflow
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Player/PlayerEntity.fcg" as PlayerEntity
import "../Card.fcg" as Card

graph DuelHUD {
    _Owner entity<Player>

    _CurrentCards List<entity<UIWidget>>
    _CurrentSignals List<entity<UIWidget>>
    _CurrentDuelCard entity<UIWidget>

    _OpponentCards List<entity<UIWidget>>
    _OpponentSignals List<entity<UIWidget>>
    _OpponentDuelCard entity<UIWidget>

    IsSetCurrentDuelCard bool
    IsSetOpponentDuelCard bool

    event OnAwake() {
        _Owner = GetOwner(thisEntity)

        var currentHand = GetChildByIndex(thisEntity, 1) as entity<UIWidget>
        var currentCardsContainer = GetChildByIndex(currentHand, 1) as entity<UIWidget>
        var currentSignalsContainer = GetChildByIndex(currentHand, 2) as entity<UIWidget>
        _CurrentCards = GetChildren(currentCardsContainer) as List<entity<UIWidget>>
        _CurrentSignals = GetChildren(currentSignalsContainer) as List<entity<UIWidget>>

        var opponentHand = GetChildByIndex(thisEntity, 2) as entity<UIWidget>
        var opponentCardsContainer = GetChildByIndex(opponentHand, 1) as entity<UIWidget>
        var opponentSignalsContainer = GetChildByIndex(opponentHand, 2) as entity<UIWidget>
        _OpponentCards = GetChildren(opponentCardsContainer) as List<entity<UIWidget>>
        _OpponentSignals = GetChildren(opponentSignalsContainer) as List<entity<UIWidget>>

        var duelCards = GetChildByIndex(thisEntity, 3) as entity<UIWidget>
        var currentDuelCardContainer = GetChildByIndex(duelCards, 1) as entity<UIWidget>
        var opponentDuelCardContainer = GetChildByIndex(duelCards, 2) as entity<UIWidget>
        _CurrentDuelCard = GetChildByIndex(currentDuelCardContainer, 1) as entity<UIWidget>
        _OpponentDuelCard = GetChildByIndex(opponentDuelCardContainer, 1) as entity<UIWidget>
    }

    event OnPhaseStart(phase entity<Phase>) {
        var phaseIndex int = phase<Phase>.Index
        if phaseIndex == EPhase.Phase1End || phaseIndex == EPhase.Phase2End {
            IsSetCurrentDuelCard = false
            IsSetOpponentDuelCard = false
        }
    }

    event OnPlayerDrawCard(cardsOnHand List<object>) {
        LogWarning("[DuelHUD] Receive event OnPlayerDrawCard: " + cardsOnHand)

        for key, card in cardsOnHand {
            _CurrentCards[key]<Card>.UpdateInfo(card as List<object>)
        }
    }

    event OnPlayerShowDuelCard(duelCard List<object>, player entity<Player>) {
        LogWarning("[DuelHUD] Receive event OnPlayerShowDuelCard: " + player + " show " + duelCard)

        if player == _Owner {
            _CurrentDuelCard<Card>.UpdateInfo(duelCard)
            IsSetCurrentDuelCard = true
        } else {
            _OpponentDuelCard<Card>.UpdateInfo(duelCard)
            IsSetOpponentDuelCard = true
        }
    }

    func CheckSetDuelCards() {
        if IsSetCurrentDuelCard && IsSetOpponentDuelCard {
            DispatchEventWithPlatform(OnDuelCardSet, globalEntity, PlatformType.Local, List<object>{_Owner, _Owner<PlayerEntity>.GetOpponent()})
        }
    }

    func GetIndexOfCurrentCardWidget(cardWidget entity<UIWidget>) int {
        return IndexOf(_CurrentCards, cardWidget)
    }
}